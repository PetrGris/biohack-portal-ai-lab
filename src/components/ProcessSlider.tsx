
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight, Target, Puzzle, TrendingUp, Users } from "lucide-react";

const ProcessSlider = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const slides = [
    {
      icon: <Target className="h-12 w-12 text-primary" />,
      title: "1. –°—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏",
      description: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å",
      example: "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞, –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞",
      image: "üéØ"
    },
    {
      icon: <Puzzle className="h-12 w-12 text-primary" />,
      title: "2. –°–æ–±–∏—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª",
      description: "–í—ã–±–∏—Ä–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã",
      example: "–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã: –¥–æ–±–∞–≤–∫–∏, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
      image: "üß©"
    },
    {
      icon: <TrendingUp className="h-12 w-12 text-primary" />,
      title: "3. –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏ —É–ª—É—á—à–∞–π—Ç–µ",
      description: "–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
      example: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –∏ —á–∞—Å—Ç–æ—Ç—É",
      image: "üìà"
    },
    {
      icon: <Users className="h-12 w-12 text-primary" />,
      title: "4. –î–µ–ª–∏—Ç–µ—Å—å —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º",
      description: "–ü—É–±–ª–∏–∫—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
      example: "–ü–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º, —É—á–∏—Ç–µ—Å—å –Ω–∞ —á—É–∂–æ–º –æ–ø—ã—Ç–µ, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
      image: "üë•"
    }
  ];

  // Auto-advance slides
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % slides.length);
    }, 5000);

    return () => clearInterval(timer);
  }, [slides.length]);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % slides.length);
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
  };

  const goToSlide = (index: number) => {
    setCurrentSlide(index);
  };

  return (
    <section className="py-16 bg-gradient-to-r from-primary/5 to-secondary/5">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="section-title">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ProtoLab Portal</h2>
          <p className="section-subtitle">
            –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –±–∏–æ—Ö–∞–∫–∏–Ω–≥–∞
          </p>
        </div>

        <div className="relative max-w-4xl mx-auto">
          {/* Main slider content */}
          <div className="bg-white rounded-xl shadow-lg p-8 min-h-[400px] relative overflow-hidden">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-4">
                {slides[currentSlide].icon}
                <div>
                  <h3 className="text-2xl font-bold">{slides[currentSlide].title}</h3>
                  <p className="text-lg text-muted-foreground">{slides[currentSlide].description}</p>
                </div>
              </div>
              <div className="text-6xl opacity-20">
                {slides[currentSlide].image}
              </div>
            </div>

            {/* Example content */}
            <div className="bg-muted/30 rounded-lg p-6 mb-6">
              <h4 className="font-semibold mb-2 text-primary">–ü—Ä–∏–º–µ—Ä:</h4>
              <p className="text-muted-foreground">{slides[currentSlide].example}</p>
              
              {/* Special content for step 2 - protocol example */}
              {currentSlide === 1 && (
                <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div className="bg-white rounded-lg p-3 border border-primary/20">
                    <div className="text-xs text-primary font-medium mb-1">–î–û–ë–ê–í–ö–ò</div>
                    <div className="text-sm">–ú–∞–≥–Ω–∏–π –≥–ª–∏—Ü–∏–Ω–∞—Ç</div>
                    <div className="text-xs text-muted-foreground">400 –º–≥ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º</div>
                  </div>
                  <div className="bg-white rounded-lg p-3 border border-secondary/20">
                    <div className="text-xs text-secondary font-medium mb-1">–ü–û–í–ï–î–ï–ù–ò–ï</div>
                    <div className="text-sm">–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å</div>
                    <div className="text-xs text-muted-foreground">–ó–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞</div>
                  </div>
                  <div className="bg-white rounded-lg p-3 border border-accent/20">
                    <div className="text-xs text-accent font-medium mb-1">–°–†–ï–î–ê</div>
                    <div className="text-sm">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 18¬∞C</div>
                    <div className="text-xs text-muted-foreground">–í—Å—é –Ω–æ—á—å</div>
                  </div>
                </div>
              )}
            </div>

            {/* Navigation controls */}
            <div className="flex items-center justify-between">
              <Button variant="outline" size="icon" onClick={prevSlide}>
                <ChevronLeft className="h-4 w-4" />
              </Button>

              {/* Slide indicators */}
              <div className="flex space-x-2">
                {slides.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => goToSlide(index)}
                    className={`w-3 h-3 rounded-full transition-colors ${
                      index === currentSlide ? 'bg-primary' : 'bg-muted'
                    }`}
                  />
                ))}
              </div>

              <Button variant="outline" size="icon" onClick={nextSlide}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Progress bar */}
          <div className="w-full bg-muted rounded-full h-1 mt-4">
            <div 
              className="bg-primary h-1 rounded-full transition-all duration-300"
              style={{ width: `${((currentSlide + 1) / slides.length) * 100}%` }}
            />
          </div>
        </div>
      </div>
    </section>
  );
};

export default ProcessSlider;
